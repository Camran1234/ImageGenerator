
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.imagegenerator.datareader;

import com.imagegenerator.circledoublelist.CircleDoubleList;
import com.imagegenerator.circledoublelist.NodeDouble;
import com.imagegenerator.treebb.BBTree;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ImageSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symImage.class;
}

  /** Default constructor. */
  @Deprecated
  public ImageSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ImageSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ImageSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\002\ufff9\011\005\001\002\000\004\002" +
    "\000\001\002\000\004\005\012\001\002\000\006\002\ufff9" +
    "\011\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffa\001\002\000\010\004\013" +
    "\006\015\011\014\001\002\000\004\011\021\001\002\000" +
    "\006\004\013\006\015\001\002\000\006\002\ufffc\011\ufffc" +
    "\001\002\000\006\002\ufffb\011\ufffb\001\002\000\006\002" +
    "\ufffe\011\ufffe\001\002\000\006\002\uffff\011\uffff\001\002" +
    "\000\006\004\013\006\015\001\002\000\006\002\ufffd\011" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\010\002\006\005\005\006\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\005\006\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\015\004\016\001\001\000\002\001\001" +
    "\000\004\004\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\021" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ImageSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ImageSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ImageSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    CircleDoubleList list = new CircleDoubleList();
    NodeDouble node = new NodeDouble(0);
    BBTree tree = new BBTree();

    public void setBBTree(BBTree existTree){
        tree = existTree;
    }

    public CircleDoubleList getList(){
        return list;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ImageSyntax$actions {
  private final ImageSyntax parser;

  /** Constructor */
  CUP$ImageSyntax$actions(ImageSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ImageSyntax$do_action_part00000000(
    int                        CUP$ImageSyntax$act_num,
    java_cup.runtime.lr_parser CUP$ImageSyntax$parser,
    java.util.Stack            CUP$ImageSyntax$stack,
    int                        CUP$ImageSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ImageSyntax$result;

      /* select the action based on the action number */
      switch (CUP$ImageSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= beginning EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).value;
		RESULT = start_val;
              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ImageSyntax$parser.done_parsing();
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // beginning ::= image_re 
            {
              Object RESULT =null;

              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("beginning",0, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // auximage ::= NUMBER auximage_re 
            {
              Object RESULT =null;
		int layerleft = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).left;
		int layerright = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).right;
		Object layer = (Object)((java_cup.runtime.Symbol) CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).value;
		
                                            node.insertLayer(tree.findNode(Integer.parseInt(String.valueOf(layer))));
                                        
              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("auximage",1, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // auximage ::= auximage_re 
            {
              Object RESULT =null;

              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("auximage",1, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // auximage_re ::= COMA NUMBER auximage_re 
            {
              Object RESULT =null;
		int layerleft = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).left;
		int layerright = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).right;
		Object layer = (Object)((java_cup.runtime.Symbol) CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)).value;
		
                                            node.insertLayer(tree.findNode(Integer.parseInt(String.valueOf(layer))));
                                        
              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("auximage_re",2, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // auximage_re ::= CLOSE_CURLY 
            {
              Object RESULT =null;
		node = new NodeDouble(0);
              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("auximage_re",2, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // image ::= NUMBER OPEN_CURLY auximage 
            {
              Object RESULT =null;
		int imagesleft = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-2)).left;
		int imagesright = ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-2)).right;
		Object images = (Object)((java_cup.runtime.Symbol) CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-2)).value;
		
                                                        node.setId(Integer.parseInt(String.valueOf(images)));
                                                        list.insert(node);
                                                    
              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("image",3, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // image_re ::= image image_re 
            {
              Object RESULT =null;

              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("image_re",4, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.elementAt(CUP$ImageSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // image_re ::= 
            {
              Object RESULT =null;

              CUP$ImageSyntax$result = parser.getSymbolFactory().newSymbol("image_re",4, ((java_cup.runtime.Symbol)CUP$ImageSyntax$stack.peek()), RESULT);
            }
          return CUP$ImageSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ImageSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ImageSyntax$do_action(
    int                        CUP$ImageSyntax$act_num,
    java_cup.runtime.lr_parser CUP$ImageSyntax$parser,
    java.util.Stack            CUP$ImageSyntax$stack,
    int                        CUP$ImageSyntax$top)
    throws java.lang.Exception
    {
              return CUP$ImageSyntax$do_action_part00000000(
                               CUP$ImageSyntax$act_num,
                               CUP$ImageSyntax$parser,
                               CUP$ImageSyntax$stack,
                               CUP$ImageSyntax$top);
    }
}

}
