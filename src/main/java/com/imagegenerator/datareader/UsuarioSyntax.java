
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.imagegenerator.datareader;

import com.imagegenerator.avltree.AvlTree;
import com.imagegenerator.avltree.NodeAvl;
import com.imagegenerator.circledoublelist.CircleDoubleList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class UsuarioSyntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symUsuario.class;
}

  /** Default constructor. */
  @Deprecated
  public UsuarioSyntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public UsuarioSyntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public UsuarioSyntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\002\ufff9\012\004\001\002\000\004\010" +
    "\012\001\002\000\006\002\ufff9\012\004\001\002\000\004" +
    "\002\000\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffa\001\002\000\010\004\013" +
    "\007\017\011\016\001\002\000\004\011\021\001\002\000" +
    "\006\002\ufffb\012\ufffb\001\002\000\006\002\ufffe\012\ufffe" +
    "\001\002\000\006\004\013\007\017\001\002\000\006\002" +
    "\ufffc\012\ufffc\001\002\000\006\002\uffff\012\uffff\001\002" +
    "\000\006\004\013\007\017\001\002\000\006\002\ufffd\012" +
    "\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\010\002\006\005\004\006\005\001\001\000" +
    "\002\001\001\000\006\005\004\006\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\013\004\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\021" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$UsuarioSyntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$UsuarioSyntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$UsuarioSyntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    CircleDoubleList list = new CircleDoubleList();
   AvlTree tree = new AvlTree();
    NodeAvl node = new NodeAvl("");

   public AvlTree getAvlTree(){
       return tree;
   }

   public void setCircleDoubleList(CircleDoubleList doubleList){
       this.list = doubleList;
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$UsuarioSyntax$actions {
  private final UsuarioSyntax parser;

  /** Constructor */
  CUP$UsuarioSyntax$actions(UsuarioSyntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$UsuarioSyntax$do_action_part00000000(
    int                        CUP$UsuarioSyntax$act_num,
    java_cup.runtime.lr_parser CUP$UsuarioSyntax$parser,
    java.util.Stack            CUP$UsuarioSyntax$stack,
    int                        CUP$UsuarioSyntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$UsuarioSyntax$result;

      /* select the action based on the action number */
      switch (CUP$UsuarioSyntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= beginning EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).value;
		RESULT = start_val;
              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$UsuarioSyntax$parser.done_parsing();
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // beginning ::= user_re 
            {
              Object RESULT =null;

              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("beginning",0, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // auxuser ::= NUMBER auxuser_re 
            {
              Object RESULT =null;
		int imageleft = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).left;
		int imageright = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).right;
		Object image = (Object)((java_cup.runtime.Symbol) CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).value;
		
                                    node.setNodeImage(list.findNode(Integer.parseInt(String.valueOf(image))));
                                    
              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("auxuser",1, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // auxuser ::= auxuser_re 
            {
              Object RESULT =null;

              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("auxuser",1, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // auxuser_re ::= COMA NUMBER auxuser_re 
            {
              Object RESULT =null;
		int imageleft = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).left;
		int imageright = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).right;
		Object image = (Object)((java_cup.runtime.Symbol) CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)).value;
		
                                            node.setNodeImage(list.findNode(Integer.parseInt(String.valueOf(image))));
                                            
              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("auxuser_re",2, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // auxuser_re ::= COLON 
            {
              Object RESULT =null;
		node = new NodeAvl("");
              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("auxuser_re",2, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // user ::= ID SEMI_COLON auxuser 
            {
              Object RESULT =null;
		int userleft = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-2)).left;
		int userright = ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-2)).right;
		Object user = (Object)((java_cup.runtime.Symbol) CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-2)).value;
		
                                        node.setId(String.valueOf(user));
                                        tree.addNode(node);
                                        
              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("user",3, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-2)), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // user_re ::= user user_re 
            {
              Object RESULT =null;

              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("user_re",4, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.elementAt(CUP$UsuarioSyntax$top-1)), ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // user_re ::= 
            {
              Object RESULT =null;

              CUP$UsuarioSyntax$result = parser.getSymbolFactory().newSymbol("user_re",4, ((java_cup.runtime.Symbol)CUP$UsuarioSyntax$stack.peek()), RESULT);
            }
          return CUP$UsuarioSyntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$UsuarioSyntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$UsuarioSyntax$do_action(
    int                        CUP$UsuarioSyntax$act_num,
    java_cup.runtime.lr_parser CUP$UsuarioSyntax$parser,
    java.util.Stack            CUP$UsuarioSyntax$stack,
    int                        CUP$UsuarioSyntax$top)
    throws java.lang.Exception
    {
              return CUP$UsuarioSyntax$do_action_part00000000(
                               CUP$UsuarioSyntax$act_num,
                               CUP$UsuarioSyntax$parser,
                               CUP$UsuarioSyntax$stack,
                               CUP$UsuarioSyntax$top);
    }
}

}
